<?php

namespace Tests\Unit;

use App\Models\Address;
use App\Models\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class UserAddressTest extends TestCase
{
    use RefreshDatabase;

    private $user, $address;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();
        $this->address = factory(Address::class)->create([
             'country_id' => 2,
             'state_id' => 10,
             'user_id' => $this->user->id,
         ]);
    }

    /**
     * A basic test example.
     * @test
     * @return void
     */
    public function check_address_table()
    {
        $this->assertNotEmpty($this->address->zip_code);
    }

    /** @test */
    public function check_for_see_all_data_on_adress()
    {
        $response =$this->actingAs($this->user, 'api')->json('GET', '/api/auth/address');

        $response->assertStatus(200);

    }

    /** @test */
    public  function  check_for_insert_into_address()
    {
        $data = $this->address->toArray();

        $response =$this->actingAs($this->user,'api')->json('POST', '/api/auth/address/add', $data);
        $response->assertStatus(201);
        $response->assertJson(['message' => "Address added successfully"]);
    }

    /** @test */
    public function check_for_update_into_address()
    {
        $response =$this->actingAs($this->user, 'api')->json('GET', '/api/auth/address');
        $response->assertStatus(200);

        $data = $this->address->toArray();

        $response =$this->actingAs($this->user,'api')->json('PATCH', '/api/auth/address/update/'.$this->address->id, $data);
        $response->assertStatus(200);

        $result = $this->address->where('id', $this->address->id)->with('country', 'state')->first();

        $results = $result->toArray();
        $response->assertExactJson(['message' => "Address Changed Successfully.", 'result'=> $results]);

    }

/** @test */
    public function  check_for_delete_from_address()
    {
        $response =$this->actingAs($this->user, 'api')->json('GET', '/api/auth/address');
        $response->assertStatus(200);

        $data = $this->address->toArray();

        $response =$this->actingAs($this->user,'api')->json('POST', '/api/auth/address/delete/', $data);
        $response->assertStatus(200);
    }
}
